# LLM Provider Configuration
# Provider options: openrouter, openai_direct, anthropic_direct
LLM_PROVIDER="openrouter"

# OpenRouter Configuration (Recommended - access to many models)
OPENROUTER_API_KEY="YOUR-API-KEY-HERE"
LLM_DEFAULT_MODEL="google/gemini-2.5-flash"  # Available via OpenRouter: gpt-4o-mini, claude-3-sonnet, etc.

# Direct OpenAI Configuration (Alternative)
# LLM_PROVIDER="openai_direct"
# LLM_OPENAI_API_KEY="your-openai-key-here"
# LLM_OPENAI_DEFAULT_MODEL="gpt-4o-mini"

# Direct Anthropic Configuration (Alternative) 
# LLM_PROVIDER="anthropic_direct"
# LLM_ANTHROPIC_API_KEY="your-anthropic-key-here"
# LLM_ANTHROPIC_DEFAULT_MODEL="claude-3-haiku-20240307"

# Data Provider API Keys
DATA_ALPHA_VANTAGE_API_KEY="YOUR-API-KEY-HERE"
DATA_FINNHUB_API_KEY="YOUR-API-KEY-HERE"
DATA_MARKETAUX_API_KEY="YOUR-API-KEY-HERE"

# ================================================================
# Signal Generation Settings (Advanced Feature)
# ================================================================
# These control the local rule-based signal generation system as an
# alternative/complement to LLM-based technical analysis.
#
# LOCAL_SIGNAL_GENERATION_ENABLED: Enable local (non-LLM) signal generation
# - true = Use local rule-based signals for technical analysis
# - false = Only use LLM for technical analysis (default)
# Impact: Faster signals, reduced API costs, but less nuanced
#
SIGNAL_GENERATION_LOCAL_SIGNAL_GENERATION_ENABLED=true

# ROLLOUT_PERCENTAGE: What % of requests use local generation (0.0-1.0)
# - 1.0 = 100% use local generation
# - 0.5 = 50% use local, 50% use LLM (A/B testing)
# - 0.0 = 0% use local (all LLM)
# Purpose: Gradual rollout, A/B testing, canary deployment
# Note: Uses random sampling on each request to achieve target %
#
SIGNAL_GENERATION_ROLLOUT_PERCENTAGE=1.0

# ENABLED_SYMBOLS: Specific stock symbols that use local generation
# - Only these symbols will attempt local generation
# - Other symbols always use LLM
# - Empty list [] = ALL symbols eligible (when rollout % allows)
# - Example: ["AAPL", "MSFT", "GOOGL"] = only these 3 symbols use local
# Purpose: Symbol-specific testing and gradual expansion
#
SIGNAL_GENERATION_ENABLED_SYMBOLS=[]

# HYBRID_MODE_ENABLED: Try local first, escalate to LLM when needed
# - false = Use ONLY local (no escalation, even if low confidence)
# - true = Try local first, escalate to LLM when confidence < threshold
# Recommended: true (best of both worlds - fast local + LLM safety net)
# Impact: Better quality on uncertain signals, slight cost increase on escalations
#
SIGNAL_GENERATION_HYBRID_MODE_ENABLED=true

# ESCALATION_CONFIDENCE_THRESHOLD: Min confidence to avoid LLM escalation
# - Only used when HYBRID_MODE_ENABLED=true
# - If local confidence < 0.3 → escalate to LLM (too uncertain)
# - If local confidence >= 0.3 → use local signal (confident enough)
# - Higher value = more LLM calls (stricter quality bar)
# - Lower value = fewer LLM calls (trust weaker local signals)
# Default: 0.3 (below 30% confidence triggers escalation)
#
SIGNAL_GENERATION_ESCALATION_CONFIDENCE_THRESHOLD=0.3


# FALLBACK_TO_LLM_ON_ERROR: What to do if local generation fails
# - true = Use LLM as fallback (safe, ensures signal always generated)
# - false = Fail entire request if local fails (strict)
# Purpose: Reliability and resilience
#
SIGNAL_GENERATION_FALLBACK_TO_LLM_ON_ERROR=true

# ENABLE_SIDE_BY_SIDE_COMPARISON: Generate BOTH local AND LLM signals
# - false = Generate only one signal (local or LLM based on config)
# - true = Generate both signals for research and comparison
# Purpose: Quality assurance, validation, performance tracking
# Impact: Doubles LLM API costs (makes both calls)
# Note: Primary signal is local, LLM signal attached for comparison
#
SIGNAL_GENERATION_ENABLE_SIDE_BY_SIDE_COMPARISON=false

# COMPARISON_SAMPLE_RATE: How often to run side-by-side comparison (0.0-1.0)
# - Only applies if ENABLE_SIDE_BY_SIDE_COMPARISON=true
# - 0.1 = Compare on 10% of requests (recommended for cost savings)
# - 1.0 = Compare on every request
# Purpose: Statistical sampling to reduce comparison costs
#
SIGNAL_GENERATION_COMPARISON_SAMPLE_RATE=0.1